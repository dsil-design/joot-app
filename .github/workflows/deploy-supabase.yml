name: Deploy Supabase Migrations

on:
  push:
    branches: [main]
    paths:
      - 'database/migrations/**'
      - 'database/schema.sql'
      - 'database/seed.sql'
  workflow_dispatch: # Allow manual trigger
  workflow_call: # Allow being called by other workflows

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Supabase CLI
        run: |
          # Install Supabase CLI using GitHub releases in temp directory to avoid conflicts
          SUPABASE_VERSION="2.34.3"
          mkdir -p /tmp/supabase-install
          cd /tmp/supabase-install
          curl -Lo supabase.tar.gz "https://github.com/supabase/cli/releases/download/v${SUPABASE_VERSION}/supabase_linux_amd64.tar.gz"
          tar -xzf supabase.tar.gz
          sudo mv supabase /usr/local/bin/
          cd $GITHUB_WORKSPACE
          rm -rf /tmp/supabase-install

      - name: Verify Supabase CLI installation
        run: supabase --version

      - name: Link to Supabase project
        run: |
          supabase login --token "$SUPABASE_ACCESS_TOKEN"
          echo "$SUPABASE_DB_PASSWORD" | supabase link --project-ref $SUPABASE_PROJECT_REF --workdir database
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

      - name: Debug migration status
        run: |
          echo "Local migrations directory:"
          ls -la database/migrations/
          echo "Checking migration status:"
          echo "$SUPABASE_DB_PASSWORD" | supabase migration list --workdir database || true
        env:
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

      - name: Repair migration history if needed
        run: |
          # Check if we need to repair migration history due to directory restructure
          if echo "$SUPABASE_DB_PASSWORD" | supabase migration list --workdir database | grep -q "20250819100000.*Remote"; then
            echo "Found migration history mismatch. Repairing..."
            echo "$SUPABASE_DB_PASSWORD" | supabase migration repair --status reverted 20250819100000 20250819134041 --workdir database
            echo "Migration history repaired."
          fi
        env:
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

      - name: Push migrations to Supabase
        run: supabase db push --workdir database
        env:
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

      - name: Verify deployment
        run: echo "$SUPABASE_DB_PASSWORD" | supabase migration list --workdir database
        env:
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
