name: Deploy Supabase Migrations

on:
  push:
    branches: [main]
    paths:
      - 'database/migrations/**'
      - 'database/schema.sql'
      - 'database/seed.sql'
  workflow_dispatch: # Allow manual trigger
  workflow_call: # Allow being called by other workflows

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Supabase CLI
        run: |
          # Install Supabase CLI using GitHub releases in temp directory to avoid conflicts
          SUPABASE_VERSION="2.34.3"
          mkdir -p /tmp/supabase-install
          cd /tmp/supabase-install
          curl -Lo supabase.tar.gz "https://github.com/supabase/cli/releases/download/v${SUPABASE_VERSION}/supabase_linux_amd64.tar.gz"
          tar -xzf supabase.tar.gz
          sudo mv supabase /usr/local/bin/
          cd $GITHUB_WORKSPACE
          rm -rf /tmp/supabase-install

      - name: Verify Supabase CLI installation
        run: supabase --version

      - name: Link to Supabase project
        run: |
          supabase login --token "$SUPABASE_ACCESS_TOKEN"
          echo "$SUPABASE_DB_PASSWORD" | supabase link --project-ref $SUPABASE_PROJECT_REF --workdir database
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

      - name: Debug migration status
        run: |
          echo "Local migrations directory:"
          ls -la database/migrations/
          echo "Checking migration status:"
          echo "$SUPABASE_DB_PASSWORD" | supabase migration list --workdir database || true
        env:
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

      - name: Repair migration history if needed
        run: |
          # Check if we need to repair migration history due to directory restructure
          migration_output=$(echo "$SUPABASE_DB_PASSWORD" | supabase migration list --workdir database)
          if echo "$migration_output" | grep -q "| 20250819100000 |" && ! echo "$migration_output" | grep -q "20250819100000.*Local"; then
            echo "Found migration history mismatch. Repairing..."
            echo "Remote migrations found that are not marked as local. Running repair..."
            echo "$SUPABASE_DB_PASSWORD" | supabase migration repair --status reverted 20250819100000 20250819134041 --workdir database
            echo "Migration history repaired."
          else
            echo "No migration history repair needed."
          fi
        env:
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

      - name: Fix migration system and handle role migration
        run: |
          echo "üîß Checking migration system and database state..."
          migration_list=$(echo "$SUPABASE_DB_PASSWORD" | supabase migration list --workdir database 2>&1)
          echo "Current migration status:"
          echo "$migration_list"
          
          # If no migrations are tracked, we need to be more careful about initialization
          if ! echo "$migration_list" | grep -q "20250819100000"; then
            echo "‚ö†Ô∏è Migration system not tracking existing migrations."
            echo "üîç Checking if role column exists in database..."
            
            # Test if role column exists using a simple query
            if echo "$SUPABASE_DB_PASSWORD" | supabase db dump --workdir database -s | grep -q "role.*user_role"; then
              echo "‚úÖ Role column exists - initializing all migrations as applied"
              echo "$SUPABASE_DB_PASSWORD" | supabase migration repair --status applied 20250819100000 20250819134041 20250820000000 20250820120000 --workdir database
            else
              echo "‚ùå Role column missing - initializing only older migrations, role migration will run"
              # Mark only the migrations that actually ran as applied
              echo "$SUPABASE_DB_PASSWORD" | supabase migration repair --status applied 20250819100000 20250819134041 20250820000000 --workdir database
              # Leave 20250820120000 (role migration) to be run
              echo "üéØ Role migration (20250820120000) will be executed by db push"
            fi
          else
            echo "‚úÖ Migration system is tracking migrations"
            
            # Additional check: if role migration is marked as applied but role column doesn't exist
            if echo "$migration_list" | grep -q "20250820120000" && echo "$migration_list" | grep -q "Applied"; then
              echo "üîç Role migration marked as applied - verifying database state..."
              if ! echo "$SUPABASE_DB_PASSWORD" | supabase db dump --workdir database -s | grep -q "role.*user_role"; then
                echo "üö® MIGRATION MISMATCH DETECTED: Role migration marked as applied but database missing changes"
                echo "üîÑ Resetting role migration status to force re-execution..."
                echo "$SUPABASE_DB_PASSWORD" | supabase migration repair --status reverted 20250820120000 --workdir database
                echo "‚úÖ Role migration reset - will be re-executed by db push"
              fi
            fi
          fi
        env:
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

      - name: Push migrations to Supabase
        run: |
          echo "Attempting to push migrations..."
          supabase db push --workdir database
        env:
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

      - name: Verify deployment
        run: |
          echo "Final migration status:"
          echo "$SUPABASE_DB_PASSWORD" | supabase migration list --workdir database
        env:
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
